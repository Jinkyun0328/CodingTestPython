1차원 배열 [6, 7, 5, 5, 2, 6, 8, 10, 12, 6]이 있다고 해보자.
index가 뒤에 있으면서 첫 번째로 큰 수를 뒤큰수라고 한다.
6의 뒤큰수는 7이 되고 7의 뒤큰수는 8이 된다.
7 다음에 오는 숫자는 5지만 7보자 작기 때문에 7보다 뒤에 있으면서
7보다 큰 첫 번째 수인 8이 뒤큰수가 된다.
이렇게 뒤큰수를 구하면 다음과 같아진다.
[7, 8, 6, 6, 6, 8, 10, 12, -1, -1]

-1은 뒤큰수가 없을 때 입력한다.
12 뒤에는 6이 있지만 6은 12보다 큰 수가 아니기 때문에 뒤큰수가 아니고
6은 가장 마지막에 있기 때문에 뒤큰수가 없다.

*뒤큰수를 구하기 위한 알고리즘
가장 먼저 생각할 수 있는 것은 이중 for문을 사용하는 것이다.
for i in ranage(len(array) - 1):
    for j in range(i+1, len(array)):
        if array[j] > array[i]:
            answer[i] = j
            break

이런 식으로 answer의 초기값을 -1로 하고 반복문을 수행하면
뒤큰수를 구할 수 있다. 이것의 시간복잡도는 n^2으로 배열의 길이가 길어질수록
기하급수적으로 증가한다.

좀 더 빠르게 수행할 수 있는 방법으로 stack을 사용하는 방법이 있다.
- 스택이 비어있거나 앞의 수가 뒤의 수보다 큰 경우 index을 스택에 push한다.
- 뒤의 수가 앞의 수보다 큰 경우
- stack의 마지막에 저장된 index에 저장된 숫자보다 현재 숫자가 더 크면
- stack을 pop한 후 aswer에 현재 숫자를 저장한다.
- 반복문이 끝나면 현재 index을 스택에 push한다.
- for문이 모두 끝나면 스택에는 뒤큰수가 존재하지 않는 index만 남는다.
- 스택을 모두 pop한 후 answer에 -1을 저장한다.

array [6, 7, 5, 5, 2, 6, 8, 10, 12, 6]에 대해서 이것을 수행해보자.
i = 0
스택이 비어 있으므로 0을 push 한다.
stack = [0]
answer = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

i = 1
array[0] < array[1]이므로 반복문을 수행한다.
스택에 마지막에는 0이 저장되어 있고
array[0] < array[1]이므로 stack을 pop하고 answer[0]에 array[1]을 저장한다.
스택에는 현재 index인 1을 push한다.
stack = [1]
answer = [7, 0, 0, 0, 0, 0, 0, 0, 0, 0]

i = 2
array[1] > array[2]이므로 2을 스택에 push한다.
stack = [1, 2]
answer = [7, 0, 0, 0, 0, 0, 0, 0, 0, 0]

i = 3
array[2] = array[3]이므로 3을 스택에 push한다.
stack = [1, 2, 3]
answer = [7, 0, 0, 0, 0, 0, 0, 0, 0, 0]

i = 4
array[3] > array[4]이므로 4을 스택에 push한다.
stack = [1, 2, 3, 4]
answer = [7, 0, 0, 0, 0, 0, 0, 0, 0, 0]

i = 5
array[4] < array[5]이므로 반복문을 수행한다.
stack의 마지막에는 4가 저장되어 있다.
array[4] < array[5]이므로 4를 pop한 후 answer[4]에 6을 저장한다.
stack의 마지막에는 3이 저장되어 있다.
array[3] < array[5]이므로 3을 pop한 후 answer[3]에 6을 저장한다.
stack의 마지막에는 2가 저장되어 있다.
array[2] < array[5]이므로 2을 pop한 후 asnwer[2]에 6을 저장한다.
stack의 마지막에는 1이 저장되어 있다.
array[1] > array[5]이므로 반복문을 종료한다.
stack에 현재 index인 5을 push한다.

stack = [1, 5]
answer = [7, 0, 6, 6, 6, 0, 0, 0, 0, 0]

i = 6
array[5] < array[6]이므로 반복문을 수행한다.
stack의 마지막에는 5가 저장되어 있다.
array[5] < array[6]이므로 5를 pop한 후 answer[5]에 8을 저장한다.
stack의 마지막에는 1이 저장되어 있다.
array[1] < array[6]이므로 1을 pop한 후 answer[1]에 8을 저장한다.
stack이 비어있으므로 반복문을 종료한다.
현재 index인 6을 stack에 push한다.

stack = [6]
answer = [7, 8, 6, 6, 6, 8, 0, 0, 0, 0]

i = 7
array[6] < array[7]이므로 반복문을 수행한다.
stack의 마지막에는 6이 저장되어 있다.
array[6] < array[7]이므로 6을 pop한 후 answer[6]에 10을 저장한다.
stack이 비어있으므로 반복문을 종료한다.
현재 index인 7을 stack에 push한다.

stack = [7]
answer = [7, 8, 6, 6, 6, 8, 10, 0, 0, 0]

i = 8
array[7] < array[8]이므로 반복문을 수행한다.
stack의 마지막에는 7이 저장되어 있다.
array[7] < array[8]이므로 7을 pop한 후 answer[7]에 12을 저장한다.
stack이 비어있으므로 반복문을 종료한다.
현재 index인 8을 stack에 push한다.

stack = [8]
answer = [7, 8, 6, 6, 6, 8, 10, 12, 0, 0]

i = 9
array[8] > array[9]이므로 현재 index인 9를 stack에 push한다.

stack = [8, 9]
answer = [7, 8, 6, 6, 6, 8, 10, 12, 0, 0]

for문이 모두 종료 되었고 stack에 남은 것을 모두 pop하여 -1을 저장한다.
stack에서 9를 pop하고 answer[9]에 -1을 저장한다.
stack에서 8을 pop하고 answer[8]에 -1을 저장한다.

stack = []
answer = [7, 8, 6, 6, 6, 8, 10, 12, -1, -1]

이처럼 스택을 사용하여 배열에서 뒤큰수를 구할 수 있다.
이중 for문을 사용하지 않기 때문에 시간 복잡도가 n^2가 되지 않아 처리 속도가 더 빠르다.












